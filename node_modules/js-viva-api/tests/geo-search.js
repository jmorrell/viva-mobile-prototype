var test = require('tape');
var getBaseUrl = require('./get-base-url.js');
var getQueryParams = require('./get-query-params.js');
var filtersTest = require('./filters.js');

function has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

module.exports = function(VivaApi) {

  var config = {
    baseUrl: "http://api.vivareal.com/api/1.0",
    apiKey: "183d98b9-fc81-4ef1-b841-7432c610b36e",
    portal: "VR_BR"
  };

  // shortcut function to get an instantiated api object
  function setup() {
    return new VivaApi(config);
  }

  function getResults(parameters, filters) {
    var api = setup();
    parameters = parameters || {};

    var requestUrl = api.geoSearch(parameters, filters);

    return {
      baseUrl: getBaseUrl(requestUrl),
      params: getQueryParams(requestUrl)
    };
  }

  test("given insufficient parameters, should throw", function(t) {
    var api = setup();

    t.throws(function() {
      api.geoSearch();
    });

    t.throws(function() {
      api.geoSearch({ latitude: 4.672606, longitude: -74.057666 });
    });

    t.throws(function() {
      api.geoSearch({ latitude: 4.672606, radius: 1000 });
    });

    t.throws(function() {
      api.geoSearch({ longitude: -74.057666, radius: 1000 });
    });

    t.throws(function() {
      api.geoSearch({ longitude: -74.057666, radius: 1000, latitude: 4.672606 });
    });

    t.throws(function() {
      api.geoSearch({ radius: 1000, latitude: 4.672606, level: "NEIGHBORHOOD" });
    });

    t.throws(function() {
      api.geoSearch({ longitude: -74.057666, latitude: 4.672606, level: "NEIGHBORHOOD" });
    });

    t.throws(function() {
      api.geoSearch({ longitude: -74.057666, radius: 1000, level: "NEIGHBORHOOD" });
    });

    t.end();
  });

  test("passing in wrong level key throws error", function(t) {
    var getRequestForLevel = function(level) {
      return getResults({
        latitude: 4.672606,
        longitude: -74.057666,
        radius: 1000,
        level: level
      });
    };

    t.throws(function() {
      getRequestForLevel("foobar");
    });
    t.end();
  });

  test("given just geosearch parameters, no filters, should not throw", function(t) {
    var api = setup();

    t.doesNotThrow(function() {
      api.geoSearch({
        latitude: 4.672606,
        longitude: -74.057666,
        radius: 1000,
        level: "NEIGHBORHOOD"
      });
    });

    t.end();
  });

  test("adds a default maxResults query parameter because required by the API", function(t) {
    var request = getResults({      
      latitude: 4.672606,
      longitude: -74.057666,
      radius: 1000,
      level: "NEIGHBORHOOD"
    });

    t.ok(has(request.params, 'maxResults'));
    t.end();
  });

  test("test base url generation", function(t) {
    var getRequestForLevel = function(level) {
      return getResults({
        latitude: 4.672606,
        longitude: -74.057666,
        radius: 1000,
        level: level
      });
    };

    t.equal(getRequestForLevel("COUNTRY").baseUrl, config.baseUrl + "/listings/clusters/1/locations"); 
    t.equal(getRequestForLevel("STATE").baseUrl, config.baseUrl + "/listings/clusters/2/locations"); 
    t.equal(getRequestForLevel("CITY").baseUrl, config.baseUrl + "/listings/clusters/4/locations"); 
    t.equal(getRequestForLevel("ZONE").baseUrl, config.baseUrl + "/listings/clusters/5/locations"); 
    t.equal(getRequestForLevel("NEIGHBORHOOD").baseUrl, config.baseUrl + "/listings/clusters/6/locations"); 
    t.equal(getRequestForLevel("LISTINGS").baseUrl, config.baseUrl + "/listings"); 
    t.end();
  });

  test("passes on the latitude, longitude, radius", function(t) {
    var request = getResults({      
      latitude: 4.672606,
      longitude: -74.057666,
      radius: 1000,
      level: "NEIGHBORHOOD"
    });

    var expected = {
      'lat': '4.672606',
      'long': '-74.057666',
      'r': '1000'
    };

    t.equal(expected.lat, request.params.lat);
    t.equal(expected.long, request.params.long);
    t.equal(expected.r, request.params.r);

    t.end();
  });

  test("passes on the latitude, longitude, radius with listings", function(t) {
    var request = getResults({      
      latitude: 4.672606,
      longitude: -74.057666,
      radius: 1000,
      level: "LISTINGS"
    });

    var expected = {
      'lat': '4.672606',
      'long': '-74.057666',
      'r': '1000'
    };

    t.equal(expected.lat, request.params.lat);
    t.equal(expected.long, request.params.long);
    t.equal(expected.r, request.params.r);

    t.end();
  });

  // Test that passing filter parameters results in the correct url parameters
  filtersTest(function(filters) {
    var api = setup();
    var parameters = {      
      latitude: 4.672606,
      longitude: -74.057666,
      radius: 1000,
      level: "NEIGHBORHOOD"
    };
    return api.geoSearch(parameters, filters);
  });

  // Test that passing filter parameters results in the correct url parameters
  // when using the LISTINGS level
  filtersTest(function(filters) {
    var api = setup();
    var parameters = {      
      latitude: 4.672606,
      longitude: -74.057666,
      radius: 1000,
      level: "LISTINGS"
    };
    return api.geoSearch(parameters, filters);
  });

};


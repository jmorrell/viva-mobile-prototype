var test = require('tape');
var getBaseUrl = require('./get-base-url.js');
var getQueryParams = require('./get-query-params.js');
var filtersTest = require('./filters.js');

function has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

module.exports = function(VivaApi) {

  var config = {
    baseUrl: "http://api.vivareal.com/api/1.0",
    apiKey: "183d98b9-fc81-4ef1-b841-7432c610b36e",
    portal: "VR_BR"
  };

  // shortcut function to get an instantiated api object
  function setup() {
    return new VivaApi(config);
  }

  function getListings(parameters, filters) {
    var api = setup();
    parameters = parameters || {};

    var requestUrl = api.listings(parameters, filters);

    return {
      baseUrl: getBaseUrl(requestUrl),
      params: getQueryParams(requestUrl)
    };
  }

  test("given no parameters, should throw", function(t) {
    var api = setup();

    t.throws(function() {
      api.listings();
    });

    t.end();
  });

  test("given just location, should throw", function(t) {
    var api = setup();

    t.throws(function() {
      api.listings({ locations: '/sp/sao-paulo' });
    });

    t.end();
  });


  test("given just listing parameters, no filters, should not throw", function(t) {
    var api = setup();

    t.doesNotThrow(function() {
      api.listings({ locations: '/sp/sao-paulo', business: "RENT" });
    });

    t.end();
  });

  test("given business that is not RENT or SALE", function(t) {
    var api = setup();

    t.doesNotThrow(function() {
      api.listings({ locations: '/sp/sao-paulo', business: "RENT" });
    });

    t.doesNotThrow(function() {
      api.listings({ locations: '/sp/sao-paulo', business: "SALE" });
    });

    t.throws(function() {
      api.listings({ locations: '/sp/sao-paulo', business: "FOO" });
    });

    t.throws(function() {
      api.listings({ locations: '/sp/sao-paulo', business: "BAR" });
    });

    t.end();
  });

  test("given location and business", function(t) {

    var request = getListings({
      locations: [
        '/sp/sao-paulo'
      ],
      business: "RENT"
    });

    // test base url creation
    t.equal(request.baseUrl, config.baseUrl + '/locations/sp/sao-paulo/listings');
    t.ok(has(request.params, 'business'));
    t.end();
  });

  test("given location as a string", function(t) {

    var request = getListings({
      locations: '/sp/sao-paulo',
      business: 'RENT'
    });

    // test base url creation
    t.equal(request.baseUrl, config.baseUrl + '/locations/sp/sao-paulo/listings');
    t.end();
  });

  test("business should be passed to the query parameters", function(t) {
    t.equal(getListings({
      locations: '/sp/sao-paulo',
      business: 'SALE'
    }).params.business, 'VENTA');

    t.equal(getListings({
      locations: '/sp/sao-paulo',
      business: 'RENT'
    }).params.business, 'RENTA');
    t.end();
  });

  test("test defaults", function(t) {
    var request = getListings({
      locations: '/sp/sao-paulo',
      business: 'SALE'
    });

    var expected = {
      page: '1'
    };

    t.equal(expected.page, request.params.page);
    t.end();
  });

  test("given multiple locations in the same zone", function(t) {
    var request = getListings({
      locations: [
        '/sp/sao-paulo/zona-sul/morumbi',
        '/sp/sao-paulo/zona-sul/moema',
        '/sp/sao-paulo/zona-sul/campo-belo',
        '/sp/sao-paulo/zona-sul/vila-mariana'
      ],
      business: 'SALE'
    });

    // test base url creation
    t.equal(request.baseUrl, config.baseUrl + '/locations/sp/sao-paulo/zona-sul/listings');

    // test query sting parameters
    
    // break the neighborhoods on comma and sort them by name
    var neighborhoods = request.params.neighborhood.split(',').sort();
    t.same(neighborhoods, ['campo-belo', 'moema', 'morumbi', 'vila-mariana']);
    
    t.end();
  });

  test("given multiple locations not in the same zone should throw an error", function(t) {
    var run = function() {
      var request = getListings({
        locations: [
          '/sp/sao-paulo/zona-sul/morumbi',
          '/sp/sao-paulo/'
        ],
        business: 'SALE'
      });
    };

    t.throws(run);
    t.end();
  });

  test("given multiple locations not in the same zone should throw an error", function(t) {
    var run = function() {
      var request = getListings({
        locations: [
          '/sp/sao-paulo/zona-sul/morumbi',
          '/sp/sao-paulo/zona-sul/moema',
          '/sp/sao-paulo/zona-norte/santana'
        ],
        business: 'SALE'
      });
    };

    t.throws(run);
    t.end();
  });


  // Test that passing filter parameters results in the correct url parameters
  filtersTest(function(filters) {
    var api = setup();
    var parameters = { locations: '/sp/sao-paulo', business: 'SALE' };
    return api.listings(parameters, filters);
  });

};

var test = require('tape');
var getQueryString = require('./get-query-params.js');

// Pass in a function with one argument that accepts a filters object
// and returns a URL. This will then test the query parameters of that
// url against those filters.

module.exports = function(query) {

  function has(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }

  // Given an input and an expected output, return a function that
  // will get test those against the query function
  function testParameterTranslation(input, expected, notPresent) {
    notPresent = notPresent || [];
    return function(t) {
      var params = getQueryString(query(input));

      for (var key in expected) {
        t.equal(params[key], expected[key]);
      }

      for(var i = 0; i < notPresent.length; i++) {
        t.ok(!has(params, notPresent[i]));
      }

      t.end();
    };
  }

  // Range parameters
  test("given area range with two nulls", testParameterTranslation(
    { 
      area: [ null, null ]
    },
    { },
    [
      'areaFrom',
      'areaUpTo'
    ]
  ));


  test("given area range with null", testParameterTranslation(
    { 
      area: [ null, 400 ]
    },
    { 
      areaUpTo: '400' 
    },
    [
      'areaFrom'
    ]
  ));

  test("given area range", testParameterTranslation(
    { 
      area: [ 200, 400 ] 
    },
    { 
      areaFrom: '200', 
      areaUpTo: '400' 
    }
  ));

  test("given bedroom range", testParameterTranslation(
    { 
      bedrooms: [ 1, 3 ] 
    },
    {
      roomsFrom: '1',
      roomsUpTo: '3'
    }
  ));

  test("given bedroom range with null", testParameterTranslation(
    { 
      bedrooms: [ null, 3 ] 
    },
    {
      roomsUpTo: '3'
    },
    [
      'roomsFrom'
    ]
  ));

  test("given bathroom range", testParameterTranslation(
    { 
      bathrooms: [ 1, 3 ] 
    },
    {
      bathroomsFrom: '1',
      bathroomsUpTo: '3'
    }
  ));

  test("given bathroom range with null", testParameterTranslation(
    { 
      bathrooms: [ 1, null ] 
    },
    {
      bathroomsFrom: '1'
    },
    [
      'bathroomsUpTo'
    ]
  ));

  test("given price range", testParameterTranslation(
    { 
      price: [ 100000, 2000000 ] 
    },
    {
      initialBasePrice: '100000',
      finalBasePrice: '2000000'
    }
  ));

  test("given price range with null", testParameterTranslation(
    { 
      price: [ null, 2000000 ] 
    },
    {
      finalBasePrice: '2000000'
    },
    [
      'initialBasePrice'
    ]
  ));

  test("given parking range", testParameterTranslation(
    { 
      parking: [ 1, 3 ]
    },
    {
      garagesFrom: '1',
      garagesUpTo: '3'
    }
  ));

  test("given parking range with null", testParameterTranslation(
    { 
      parking: [ 1, null ]
    },
    {
      garagesFrom: '1'
    },
    [ 
      'garagesUpTo' 
    ]
  ));


  // String parameters

  // order
  test("null order should have no parameters", function(t) {
    var params = getQueryString(query({ order: null }));
    t.notOk(has(params, 'order'));
    t.end();
  });

  test("no order param should have no parameters", function(t) {
    var params = getQueryString(query({}));
    t.notOk(has(params, 'order'));
    t.end();
  });

  test("test the order translations", function(t) {
    var translations = {
      "PRICE_ASCENDING": "precio_venta_base",
      "PRICE_DESCENDING": "precio_venta_base desc",
      "BATHROOMS": "banos",
      "BEDROOMS": "habitaciones"
    };

    for (var key in translations) {
      var params = getQueryString(query({ order: key }));
      t.equal(params.order, translations[key]);
    }

    t.end();
  });

  // type
  test("no type param should have no parameters", function(t) {
    var params = getQueryString(query({}));
    t.notOk(params.type);
    t.end();
  });

  // TODO
  // test("test the property type translations", function(t) {
  //   var translations = {
  //     "RENT": "RENTA",
  //     "SALE": "VENTA"
  //   };

  //   for (var key in translations) {
  //     var params = getQueryString(query({ business: key }));
  //     t.equal(params.business, translations[key]);
  //   }

  //   t.end();
  // });

  // Other parameters
  
  test("page parameter defaults to 1 if not provided", testParameterTranslation(
    { },
    {
      page: '1'
    }
  ));

  test("given page parameter", testParameterTranslation(
    { 
      page: 3
    },
    {
      page: '3'
    }
  ));

  test("numResults parameter defaults to null if not provided", function(t) {
    var params = getQueryString(query({}));
    t.notOk(params.numResults);
    t.end();
  });

  test("given numResults parameter", testParameterTranslation(
    { 
      numResults: 99
    },
    {
      maxResults: '99'
    }
  ));

  test("hasPhoto if passed as false", testParameterTranslation(
    { 
      hasPhoto: false 
    },
    {
      hasImage: 'false'
    }
  ));

  test("hasPhoto if passed as true", testParameterTranslation(
    { 
      hasPhoto: true 
    },
    {
      hasImage: 'true'
    }
  ));

};


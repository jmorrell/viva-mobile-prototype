{
  "name": "js-viva-api",
  "version": "0.0.0",
  "description": "Javascript Wrapper around the VivaReal API endpoints.",
  "main": "index.js",
  "scripts": {
    "test": "node tests"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/VivaReal/js-viva-api.git"
  },
  "author": {
    "name": "morrell.jeremy@gmail.com"
  },
  "readmeFilename": "README.md",
  "private": true,
  "devDependencies": {
    "tape": "~1.0.1"
  },
  "dependencies": {
    "browser-request": "~0.2.1"
  },
  "readme": "\n# TODO\n\n    - [X] README: Listings\n    - [X] README: Autocomplete\n    - [X] README: Geo Listings\n    - [X] README: Geo Cluster Search\n    - [X] README: Property Detail\n    - [ ] README: Get Sublocations\n    - [ ] README: Send lead\n    - [ ] Implement unit tests\n      - [X] Listings\n      - [X] Geo Listings\n      - [X] Geo Cluster Search\n      - [X] Autocomplete\n      - [ ] Property Detail\n      - [ ] Property Contact Detail\n      - [ ] Send Lead\n      - [ ] Get Sublocations\n    - [X] Make the tests pass in node.js\n    - [ ] Make the tests pass in all supported browsers\n\n\n# Notes\n\n# What does the API do?\n\nCurrently the API has endpoints for the following functionality:\n\n  * Fetch listings given:\n     * geo queries (lat + long) and some parameters\n     * a locationID and some parameters\n  * Autocomplete locations\n  * Get the details for a specific property\n  * Get the contact information for a specific property\n  * Fetch sublocations given a locationID (e.g. zones in Bogot√°)\n  * Fetch clusters of locations given geo queries\n  * POST leads\n\nSoon we'll be adding more functionality:\n\n  * Fetch new developments as well as used properties\n  * ??\n\n## Installation\n\n#### Simplest\n\nThe simplest method to install this library is just dropping the built library \ninto the page with a script tag. This will make the `VivaAPI` object available \nglobally.\n\n```html\n<script src=\"//.../js-viva-api.js\"></script>\n```\n\n#### Browserify\n\nYou can also install it via npm and use it via browserify. Since this will not \n(yet) be published to npm, you will have to give npm the git url.\n\n```\nnpm install VivaReal/js-viva-api\n```\n\nYou can then require it in your code like any other npm package\n\n```javascript\nvar VivaAPI = require('viva-api');\n```\n\n#### require.js\n\nThe library will also be written with an AMD-compatible wrapper so that it will\nable to be used directly in require.js projects.\n\n#### Node.js\n\nThe instructions for using this in node are the same as using it in a browserify \nproject.\n\n\n## Initialization\n\nOnce you have the library included in your environment, you can need to initialize\nthe wrapper with a few pieces of information.\n\n```javascript\nvar api = new VivaAPI({\n  baseUrl: \"http://api.vivareal.com/api/1.0\",        // Should we default to this?\n  apiKey: \"183d98b9-fc81-4ef1-b841-7432c610b36e\",\n  token: \"...\",                                      // optional\n  portal: \"VR_BR\"\n});\n```\n\n# Usage Summary\n\n```javascript\n// Perform a search given a location id\napi.listings(listingParameters, filters, callback);\n\n// Perform a search for listings or locaitons given latitude and longitude information\napi.geoSearch(geoListingParameters, filters, callback);\n\n// Navigate the hierarchy of locations\napi.sublocations(locationID, callback);\n\n// Autocomplete a location\napi.autocomplete('input', callback);\n\n// Get the full info for a specific property\napi.property('property_id', callback);\n\n// Get the contact info for a specific property\napi.contact('property_id', callback);\n\n// Send a lead for a particular property\napi.sendLead(leadInfo, callback);\n```\n\n# Filters\n\nThe listings and geoListings methods share a common filters parameter. We can define\nparameters that can be used to narrow down either search. They are defined in a plain\njavascript object that looks like this:\n\n```javascript\nvar filters = {\n  area: [ null, 100 ],\n  bedrooms: [ 1, 3 ],\n  order: 'PRICE_ASCENDING',\n  type: 'APARTMENT'\n};\n```\n\nI will try to list all of the parameter options here.\n\n**Default parameters**\n\nIf certain parameters are not added to the request, they will default to:\n\n```\nhasPhoto: true,\npage: 1,\n```\n\n**Range parameters**\n\nThere are 5 parameters that are defined via a range.\n\n* `area` - The area in square meters\n* `price` - The price in the given currency\n* `bedrooms` - The number of bedrooms\n* `bathrooms` - The number of bathrooms\n* `parking` - The number of parking spaces\n\nTo define a range, use an array with two values. If one of the ranges is\nopen-ended (e.g. 2 or more bedrooms) pass a `null`\nvalue for the open end of the range. All ranges are inclusive.\n\nExamples:\n\n```\n// 2 - 3 bedrooms\nbedrooms: [ 2, 3 ]\n\n// Up to 2 bedrooms\nbedrooms: [ null, 2 ]\n\n// at least 3 bedrooms\nbedrooms: [ 3, null ]\n```\n\n**Parameters with string values**\n\nThere are several parameters that need to be defined by one of a specific set of strings.\n\n`order` - Define the order for the results\n\n* `null` - The natural ordering as determined by the service\n* `\"PRICE_ASCENDING\"` - Order by price starting with the lowest\n* `\"PRICE_DESCENDING\"` - Order by price starting with the highest\n* `\"BATHROOMS\"` - Order by number of bathrooms starting with the the lowest\n* `\"BEDROOMS\"` - Order by number of bedrooms starting with the lowest\n\n`type` - Define the type of properties we'd like to see\n\n* `\"APARTMENT\"`\n* `\"???\"`\n* `\"HOUSE\"`\n* `\"FARM\"`\n* `\"CONDO\"`\n* `\"FLAT\"`\n* `\"LOT\"`\n* `\"???\"`\n* `\"???\"`\n* `\"???\"`\n* `\"OFFICE\"`\n* `\"COMMERCIAL_FARM\"`\n* `\"WAREHOUSE\"`\n* `\"???\"`\n* `\"???\"`\n* `\"???\"`\n\n`business` - Define the type of property transactions we want\n\n* `\"SALE\"` - Used properties for sale\n* `\"RENT\"` - Properties for rent\n* `\"PROJECTS\"` - **Not yet available**\n\n**Other parameters**\n\n* `numResults` - The number of results requested from the API\n* `page` - The page of results to show\n* `hasPhoto` - Filter out results that don't have a photo associated\n* `currency` - This should automatically be set based on the portal\n\n**Parameters that are not understood**\n\nThere are a few parameters defined in the API that I do not yet understand:\n\n* `accountID` - to be used in the future to request searches from a particular publisher\n* `url`\n* `queryAllLocations` - Oscar is also confused as to what this could possibly mean\n* `listingUse` - Residential or commerical, but I don't see the use\n\n# Listings\n\n### Example Usage:\n\n```javascript\n// Define the parameters for your search in a plain javascript object\nvar parameters = {\n  locations: '/sp/sao-paulo', \n  business: 'RENT'\n};\n\n// Define the filters on the search\nvar filters = {\n  bedrooms: [ 2, 2 ],\n  price: [ 1000000, 2000000 ]\n};\n\n// Get the appropriate url for the request for the given parameters.\napi.listings(parameters, filters);\n\n// Have the library fetch the results for you. You can trigger the \n// request by passing in a node-style callback as a third argument.\napi.listings(parameters, filters, function(err, data) {\n /* ... */\n});\n```\n\n### Parameters\n\nThere is one parameter that is required to get the listings: `locations`\n\n`locations` - Can either be a string or an array of strings. Each string must be a location\nid. Location ids look like: `\"/sp/sao-paulo\"`\n\nCurrently there is a restriction that if you pass multiple locations that they must all be\nneighborhoods for the same zone or city if there are no zones for that city. If you pass\nmultiple locations that do not meet this criteria an error will fire.\n\nExample:\n```\nlocations: '/sp/sao-paulo/zona-sul/morumbi'\n\nlocations: [\n    '/sp/sao-paulo/zona-sul/morumbi',\n    '/sp/sao-paulo/zona-sul/moema',\n    '/sp/sao-paulo/zona-sul/campo-belo',\n    '/sp/sao-paulo/zona-sul/vila-mariana'\n]\n```\n\n# Geo Search\n\nReturn either listings of properties or locations in a specific geographic region.\n\n### Example Usage\n\n```javascript\nvar parameters = {\n  latitude: 4.672606,\n  longitude: -74.057666,\n  radius: 1000,\n  level: 'NEIGHBORHOOD'\n};\n\nvar listingsUrl = api.geoSearch(parameters, filters, function(err, data) {\n  /* ... */    \n});\n```\n\nThere are four parameters required for the search:\n\n* `latitude`\n* `longitude`\n* `radius` - in meters\n* `level` - one of `\"COUNTRY\"`, `\"STATE\"`,`\"CITY\"`,`\"ZONE\"`,`\"NEIGHBORHOOD\"`, `\"LISTINGS\"`\n\nN.B. `\"LISTINGS\"` will work a little differently from the others, but we'll work on \nironing out those differences in the future.\n\n# Autocomplete locations\n\n```javascript\napi.autocomplete('input');\n// => Url\n\napi.autocomplete('input', function(err, data) { /* ... */ });\n```\n\n# Specific Property Info\n\n```javascript\napi.property('property_id'); // => Url\n\napi.property('property_id', function(err, data) { /* ... */ });\n```\n\n# Specific Property Contact Info\n\n```javascript\napi.contact('property_id'); // => Url\n\napi.contact('property_id', function(err, data) { /* ... */ });\n```\n\n# Fetch sublocations given a locationID\n\n```javascript\napi.sublocations('/sp/sao-paulo'); // => Url\n\n// Return the sublocations of a given location id\napi.sublocations('/sp/sao-paulo', function(err, data) { /* ... */ });\n```\n\n# Post leads\n\n```javascript\napi.sendLead({ /* lead info */ }, function(err, data) {\n  // data will just hold a success message if the POST was successful \n});\n\nTODO: Need to document the data required\n```\n\n\n\n\n\n\n",
  "_id": "js-viva-api@0.0.0",
  "dist": {
    "shasum": "f72da8612624c608ca3d628959b56fc4161627bc"
  },
  "_from": "/Users/jmorrell/workspace/vivareal/js-viva-api"
}
